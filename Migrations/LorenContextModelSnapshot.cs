// <auto-generated />
using System;
using Loren_TPI_Prog3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Loren_TPI_Prog3.Migrations
{
    [DbContext(typeof(LorenContext))]
    partial class LorenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Products.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = 34,
                            Name = "Negro"
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = 65,
                            Name = "Blanco"
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = 28,
                            Name = "Rojo"
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Corpiños",
                            Code = "86a82f45-0b59-4a91-8a55-8310231d2145",
                            CreationDate = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Corpiño push-up de suave textura y excelente calidad",
                            Discount = 0m,
                            ImageLink = "https://http2.mlstatic.com/D_NQ_NP_692024-MLA53006038573_122022-O.webp",
                            LastModifiedDate = new DateTime(2023, 11, 21, 3, 47, 35, 645, DateTimeKind.Local).AddTicks(6278),
                            Name = "Corpiño",
                            Price = 12000.34m,
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Category = "Mallas",
                            Code = "c0a10729-935c-4b64-a759-8d41e5d7d17f",
                            CreationDate = new DateTime(2023, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Malla de algodón",
                            Discount = 10.5m,
                            ImageLink = "https://http2.mlstatic.com/D_NQ_NP_674011-MLA52236140541_112022-O.webp",
                            LastModifiedDate = new DateTime(2023, 11, 21, 3, 47, 35, 645, DateTimeKind.Local).AddTicks(6336),
                            Name = "Malla",
                            Price = 9000.84m,
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            Category = "Camisones",
                            Code = "5d38a43d-b7dc-4c37-af67-ed67dec9fa69",
                            CreationDate = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Camisón de seda confeccionado con un material suave y lujoso",
                            Discount = 0m,
                            ImageLink = "https://selulen.vtexassets.com/arquivos/ids/179923/SL16202_vison_1-selu-camison-raso-pijama-regulable-enagua-puntilla-estampado.jpg?v=638104325419730000",
                            LastModifiedDate = new DateTime(2023, 11, 21, 3, 47, 35, 645, DateTimeKind.Local).AddTicks(6341),
                            Name = "Camisón",
                            Price = 5000.34m,
                            State = true
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Products.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 2,
                            ProductId = 1,
                            SizeId = 3,
                            Stock = 14
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 3,
                            ProductId = 2,
                            SizeId = 1,
                            Stock = 24
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 1,
                            ProductId = 3,
                            SizeId = 2,
                            Stock = 5
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Products.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizeCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "S",
                            SizeCode = 23
                        },
                        new
                        {
                            Id = 2,
                            Name = "M",
                            SizeCode = 75
                        },
                        new
                        {
                            Id = 3,
                            Name = "L",
                            SizeCode = 12
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.SaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("SaleOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Completed = false,
                            OrderCode = "f3077694-88c7-4904-b7cc-79c8211e17c5",
                            OrderDate = new DateTime(2023, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 0,
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            Completed = false,
                            OrderCode = "4de94d25-6ac4-45ea-b57a-77aa63d0d3ba",
                            OrderDate = new DateTime(2023, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 1,
                            State = true
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.SaleOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("int");

                    b.Property<int>("SaleOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("SaleOrderLine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            QuantityOrdered = 2,
                            SaleOrderId = 1,
                            Total = 0m
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            QuantityOrdered = 1,
                            SaleOrderId = 1,
                            Total = 0m
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            QuantityOrdered = 3,
                            SaleOrderId = 2,
                            Total = 0m
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("Loren_TPI_Prog3.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "ezecoria@gmail.com",
                            LastName = "Coria",
                            Name = "Ezequiel",
                            Password = "eze123456",
                            State = true,
                            UserName = "eze95",
                            UserType = "Admin"
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Client", b =>
                {
                    b.HasBaseType("Loren_TPI_Prog3.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Montevideo 1150 7B",
                            Email = "leocabral@gmail.com",
                            LastName = "Cabral",
                            Name = "Leandro",
                            Password = "leo123456",
                            State = true,
                            UserName = "lean94",
                            UserType = "Client"
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.SuperAdmin", b =>
                {
                    b.HasBaseType("Loren_TPI_Prog3.Data.Entities.User");

                    b.HasDiscriminator().HasValue("SuperAdmin");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "santibrasca@gmail.com",
                            LastName = "Brasca",
                            Name = "Santiago",
                            Password = "santi123456",
                            State = true,
                            UserName = "santi02",
                            UserType = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Products.ProductVariant", b =>
                {
                    b.HasOne("Loren_TPI_Prog3.Data.Entities.Products.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Loren_TPI_Prog3.Data.Entities.Products.Product", null)
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Loren_TPI_Prog3.Data.Entities.Products.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.SaleOrder", b =>
                {
                    b.HasOne("Loren_TPI_Prog3.Data.Entities.Client", "Client")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.SaleOrderLine", b =>
                {
                    b.HasOne("Loren_TPI_Prog3.Data.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Loren_TPI_Prog3.Data.Entities.SaleOrder", "SaleOrder")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Products.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.SaleOrder", b =>
                {
                    b.Navigation("SaleOrderLines");
                });

            modelBuilder.Entity("Loren_TPI_Prog3.Data.Entities.Client", b =>
                {
                    b.Navigation("SaleOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
